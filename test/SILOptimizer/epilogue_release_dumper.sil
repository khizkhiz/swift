// RUN: %target-sil-opt -enable-sil-verify-all -sil-epilogue-release-dumper %s | FileCheck %s

import Builtin
import Swift


/////////////////////
// Data Structures //
/////////////////////

class foo {
  var a: Int
   deinit 
  init()
}

class bar {
  var start: foo
  var end: foo
   deinit 
  init()
}

struct baz {
  var start: foo
  var end: foo
  init()
}

// CHECK-LABEL: START: sil @single_release_foo
// CHECK: [[IN1:%.*]] = argument of bb0 : $foo
// CHECK: strong_release [[IN1]] : $foo
// CHECK: END: sil @single_release_foo
sil @single_release_foo : $@convention(thin) (@owned foo) -> () {
bb0(%0 : $foo):
  strong_release %0 : $foo
  %3 = tuple ()
  return %3 : $()
}

// CHECK-LABEL: START: sil @single_release_bar
// CHECK: [[IN1:%.*]] = argument of bb0 : $bar
// CHECK: strong_release [[IN1]] : $bar
// CHECK: END: sil @single_release_bar
sil @single_release_bar : $@convention(thin) (@owned bar) -> () {
bb0(%0 : $bar):
  strong_release %0 : $bar
  %3 = tuple ()
  return %3 : $()
}

// CHECK-LABEL: START: sil @multiple_release_bar
// CHECK: [[IN1:%.*]] = argument of bb0 : $bar
// CHECK: release_value [[IN1]] : $bar
// CHECK: END: sil @multiple_release_bar
sil @multiple_release_bar : $@convention(thin) (@owned bar) -> () {
bb0(%0 : $bar):
  strong_release %0 : $bar
  release_value %0 : $bar
  %3 = tuple ()
  return %3 : $()
}

// CHECK-LABEL: START: sil @exploded_release_baz
// CHECK: [[IN1:%.*]] = argument of bb0 : $baz
// CHECK: strong_release
// CHECK: strong_release
// CHECK: END: sil @exploded_release_baz
sil @exploded_release_baz : $@convention(thin) (@owned baz) -> () {
bb0(%0 : $baz):
  %1 = struct_extract %0 : $baz, #baz.start
  %2 = struct_extract %0 : $baz, #baz.end
  strong_release %1 : $foo
  strong_release %2 : $foo
  %5 = tuple ()
  return %5 : $()
}

// Make sure we stop at retain_value   %0.
//
// CHECK-LABEL: START: sil @exploded_release_with_interfering_uses
// CHECK: [[IN1:%.*]] = argument of bb0 : $baz
// CHECK: strong_release
// CHECK: END: sil @exploded_release_with_interfering_uses
sil @exploded_release_with_interfering_uses : $@convention(thin) (@owned baz) -> () {
bb0(%0 : $baz):
  %1 = struct_extract %0 : $baz, #baz.start
  %2 = struct_extract %0 : $baz, #baz.end
  strong_release %1 : $foo
  retain_value   %0 : $baz
  strong_release %2 : $foo
  %3 = tuple ()
  return %3 : $()
}

// Make sure we stop at an overlapping release.
//
// CHECK-LABEL: START: sil @exploded_release_with_overlapping_releases
// CHECK: [[IN1:%.*]] = argument of bb0 : $baz
// CHECK: strong_release
// CHECK-NOT: strong_release
// CHECK: END: sil @exploded_release_with_overlapping_releases
sil @exploded_release_with_overlapping_releases : $@convention(thin) (@owned baz) -> () {
bb0(%0 : $baz):
  %1 = struct_extract %0 : $baz, #baz.start
  %2 = struct_extract %0 : $baz, #baz.end
  strong_release %1 : $foo
  release_value  %0 : $baz
  strong_release %2 : $foo
  %5 = tuple ()
  return %5 : $()
}

// CHECK-LABEL: START: sil @single_release_on_multiple_args
// CHECK: [[IN1:%.*]] = argument of bb0 : $foo
// CHECK: strong_release [[IN1]] : $foo
// CHECK: [[IN2:%.*]] = argument of bb0 : $bar
// CHECK: strong_release [[IN2]] : $bar
// CHECK: END: sil @single_release_on_multiple_args
sil @single_release_on_multiple_args : $@convention(thin) (@owned foo, @owned bar) -> () {
bb0(%0 : $foo, %1 : $bar):
  strong_release %0 : $foo
  strong_release %1 : $bar
  %3 = tuple ()
  return %3 : $()
}

// CHECK-LABEL: START: sil @single_release_on_multiple_args_with_interfering_uses
// CHECK: [[IN1:%.*]] = argument of bb0 : $foo
// CHECK-NOT: strong_release [[IN1]] : $foo
// CHECK: [[IN2:%.*]] = argument of bb0 : $bar
// CHECK: strong_release [[IN2]] : $bar
// CHECK: END: sil @single_release_on_multiple_args_with_interfering_uses
sil @single_release_on_multiple_args_with_interfering_uses : $@convention(thin) (@owned foo, @owned bar) -> () {
bb0(%0 : $foo, %1 : $bar):
  strong_release %0 : $foo
  strong_retain %1 : $bar
  strong_release %1 : $bar
  %3 = tuple ()
  return %3 : $()
}
