#ifndef SWIFT_MANGLER_HUFFMAN_H
#define SWIFT_MANGLER_HUFFMAN_H
#include <assert.h>
#include "llvm/ADT/APInt.h"
using APInt = llvm::APInt;
// This file is autogenerated. Do not modify this file.
// Processing text files: CBC_Compressed.sz
namespace Huffman {
// The charset that the fragment indices can use:
unsigned CharsetLength = 63;
unsigned LongestEncodingLength = 10;
const char *Charset = "0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
unsigned getLastBit(const APInt &In) { return *In.getRawData() & 1; }

char variable_decode(APInt &num) {
if (getLastBit(num) == 0) {
 num = num.lshr(1);
 if (getLastBit(num) == 0) {
  num = num.lshr(1);
  if (getLastBit(num) == 0) {
   num = num.lshr(1);
   if (getLastBit(num) == 0) {
    num = num.lshr(1);
    if (getLastBit(num) == 0) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      return 'w';
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       return 'I';
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       return 'U';
      }
     }
    }
    if (getLastBit(num) == 1) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      return '4';
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      return '5';
     }
    }
   }
   if (getLastBit(num) == 1) {
    num = num.lshr(1);
    if (getLastBit(num) == 0) {
     num = num.lshr(1);
     return 't';
    }
    if (getLastBit(num) == 1) {
     num = num.lshr(1);
     return 'a';
    }
   }
  }
  if (getLastBit(num) == 1) {
   num = num.lshr(1);
   if (getLastBit(num) == 0) {
    num = num.lshr(1);
    if (getLastBit(num) == 0) {
     num = num.lshr(1);
     return 'i';
    }
    if (getLastBit(num) == 1) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      return 'A';
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      return 'm';
     }
    }
   }
   if (getLastBit(num) == 1) {
    num = num.lshr(1);
    if (getLastBit(num) == 0) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      return '3';
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      return 'd';
     }
    }
    if (getLastBit(num) == 1) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      return 'l';
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       return 'M';
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       return 'K';
      }
     }
    }
   }
  }
 }
 if (getLastBit(num) == 1) {
  num = num.lshr(1);
  if (getLastBit(num) == 0) {
   num = num.lshr(1);
   if (getLastBit(num) == 0) {
    num = num.lshr(1);
    if (getLastBit(num) == 0) {
     num = num.lshr(1);
     return 'Y';
    }
    if (getLastBit(num) == 1) {
     num = num.lshr(1);
     return 'r';
    }
   }
   if (getLastBit(num) == 1) {
    num = num.lshr(1);
    if (getLastBit(num) == 0) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       return 'E';
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       return 'k';
      }
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      return 'c';
     }
    }
    if (getLastBit(num) == 1) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      return 'p';
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       return 'B';
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       return 'O';
      }
     }
    }
   }
  }
  if (getLastBit(num) == 1) {
   num = num.lshr(1);
   if (getLastBit(num) == 0) {
    num = num.lshr(1);
    if (getLastBit(num) == 0) {
     num = num.lshr(1);
     return '1';
    }
    if (getLastBit(num) == 1) {
     num = num.lshr(1);
     return 's';
    }
   }
   if (getLastBit(num) == 1) {
    num = num.lshr(1);
    if (getLastBit(num) == 0) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      return '9';
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      return 'x';
     }
    }
    if (getLastBit(num) == 1) {
     num = num.lshr(1);
     return 'T';
    }
   }
  }
 }
}
if (getLastBit(num) == 1) {
 num = num.lshr(1);
 if (getLastBit(num) == 0) {
  num = num.lshr(1);
  if (getLastBit(num) == 0) {
   num = num.lshr(1);
   if (getLastBit(num) == 0) {
    num = num.lshr(1);
    if (getLastBit(num) == 0) {
     num = num.lshr(1);
     return 'S';
    }
    if (getLastBit(num) == 1) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       return 'y';
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       if (getLastBit(num) == 0) {
        num = num.lshr(1);
        return 'X';
       }
       if (getLastBit(num) == 1) {
        num = num.lshr(1);
        return 'L';
       }
      }
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      return 'o';
     }
    }
   }
   if (getLastBit(num) == 1) {
    num = num.lshr(1);
    if (getLastBit(num) == 0) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       return 'D';
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       return 'G';
      }
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      return 'F';
     }
    }
    if (getLastBit(num) == 1) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      return '6';
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       return 'N';
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       return 'P';
      }
     }
    }
   }
  }
  if (getLastBit(num) == 1) {
   num = num.lshr(1);
   return 'J';
  }
 }
 if (getLastBit(num) == 1) {
  num = num.lshr(1);
  if (getLastBit(num) == 0) {
   num = num.lshr(1);
   if (getLastBit(num) == 0) {
    num = num.lshr(1);
    return '_';
   }
   if (getLastBit(num) == 1) {
    num = num.lshr(1);
    if (getLastBit(num) == 0) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       return 'W';
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       if (getLastBit(num) == 0) {
        num = num.lshr(1);
        return 'v';
       }
       if (getLastBit(num) == 1) {
        num = num.lshr(1);
        return 'Z';
       }
      }
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       return 'h';
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       if (getLastBit(num) == 0) {
        num = num.lshr(1);
        return 'R';
       }
       if (getLastBit(num) == 1) {
        num = num.lshr(1);
        return 'q';
       }
      }
     }
    }
    if (getLastBit(num) == 1) {
     num = num.lshr(1);
     return 'e';
    }
   }
  }
  if (getLastBit(num) == 1) {
   num = num.lshr(1);
   if (getLastBit(num) == 0) {
    num = num.lshr(1);
    if (getLastBit(num) == 0) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      return 'f';
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       return '8';
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       return 'b';
      }
     }
    }
    if (getLastBit(num) == 1) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      return '2';
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       return 'V';
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       return 'u';
      }
     }
    }
   }
   if (getLastBit(num) == 1) {
    num = num.lshr(1);
    if (getLastBit(num) == 0) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      return 'n';
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       return 'g';
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       return '7';
      }
     }
    }
    if (getLastBit(num) == 1) {
     num = num.lshr(1);
     if (getLastBit(num) == 0) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       return 'C';
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       return 'z';
      }
     }
     if (getLastBit(num) == 1) {
      num = num.lshr(1);
      if (getLastBit(num) == 0) {
       num = num.lshr(1);
       if (getLastBit(num) == 0) {
        num = num.lshr(1);
        if (getLastBit(num) == 0) {
         num = num.lshr(1);
         return 'Q';
        }
        if (getLastBit(num) == 1) {
         num = num.lshr(1);
         return 'H';
        }
       }
       if (getLastBit(num) == 1) {
        num = num.lshr(1);
        return 'j';
       }
      }
      if (getLastBit(num) == 1) {
       num = num.lshr(1);
       return '0';
      }
     }
    }
   }
  }
 }
} 
 assert(false); return 0;
}
void variable_encode(APInt &num, char ch) {
if (ch == 'w') {/*000000*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); return;}
if (ch == 'I') {/*0100000*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); return;}
if (ch == 'U') {/*1100000*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); return;}
if (ch == '4') {/*010000*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); return;}
if (ch == '5') {/*110000*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); return;}
if (ch == 't') {/*01000*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); return;}
if (ch == 'a') {/*11000*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); return;}
if (ch == 'i') {/*00100*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); return;}
if (ch == 'A') {/*010100*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); return;}
if (ch == 'm') {/*110100*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); return;}
if (ch == '3') {/*001100*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); return;}
if (ch == 'd') {/*101100*/ num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); return;}
if (ch == 'l') {/*011100*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); return;}
if (ch == 'M') {/*0111100*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); return;}
if (ch == 'K') {/*1111100*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); return;}
if (ch == 'Y') {/*00010*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); return;}
if (ch == 'r') {/*10010*/ num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); return;}
if (ch == 'E') {/*0001010*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); return;}
if (ch == 'k') {/*1001010*/ num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); return;}
if (ch == 'c') {/*101010*/ num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); return;}
if (ch == 'p') {/*011010*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); return;}
if (ch == 'B') {/*0111010*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); return;}
if (ch == 'O') {/*1111010*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); return;}
if (ch == '1') {/*00110*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); return;}
if (ch == 's') {/*10110*/ num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); return;}
if (ch == '9') {/*001110*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); return;}
if (ch == 'x') {/*101110*/ num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); return;}
if (ch == 'T') {/*11110*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); return;}
if (ch == 'S') {/*00001*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; return;}
if (ch == 'y') {/*0010001*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; return;}
if (ch == 'X') {/*01010001*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; return;}
if (ch == 'L') {/*11010001*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; return;}
if (ch == 'o') {/*110001*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; return;}
if (ch == 'D') {/*0001001*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; return;}
if (ch == 'G') {/*1001001*/ num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; return;}
if (ch == 'F') {/*101001*/ num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; return;}
if (ch == '6') {/*011001*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; return;}
if (ch == 'N') {/*0111001*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; return;}
if (ch == 'P') {/*1111001*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; return;}
if (ch == 'J') {/*101*/ num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; return;}
if (ch == '_') {/*0011*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'W') {/*0001011*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'v') {/*01001011*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'Z') {/*11001011*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'h') {/*0101011*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'R') {/*01101011*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'q') {/*11101011*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'e') {/*11011*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'f') {/*000111*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == '8') {/*0100111*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'b') {/*1100111*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == '2') {/*010111*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'V') {/*0110111*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'u') {/*1110111*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'n') {/*001111*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'g') {/*0101111*/ num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == '7') {/*1101111*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'C') {/*0011111*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'z') {/*1011111*/ num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'Q') {/*000111111*/ num = num.shl(1); num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'H') {/*100111111*/ num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == 'j') {/*10111111*/ num = num.shl(1); num = ++num; num = num.shl(1); num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
if (ch == '0') {/*1111111*/ num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; num = num.shl(1); num = ++num; return;}
assert(false);
}
} // namespace
#endif /* SWIFT_MANGLER_HUFFMAN_H */
